[["sex-biased-gene-flow.html", "Week 9 Sex-biased gene flow 9.1 Multiple plots", " Week 9 Sex-biased gene flow 9.1 Multiple plots Often it’s useful to look at multiple plots side by side. Today we’ll learn an easy way to do that. Once again, we’ll use the Arthritis dataset. library(vcd) ## Loading required package: grid data(Arthritis) head(Arthritis) ## ID Treatment Sex Age Improved ## 1 57 Treated Male 27 Some ## 2 46 Treated Male 29 None ## 3 77 Treated Male 30 None ## 4 17 Treated Male 32 Marked ## 5 36 Treated Male 46 Marked ## 6 23 Treated Male 58 Marked   Maybe we want to compare outcomes for the treated vs. placebo patients. We could plot each like this: treated &lt;- subset(Arthritis,Treatment==&quot;Treated&quot;) table.treated &lt;- table(treated$Improved) barplot(table.treated) placebo &lt;- subset(Arthritis,Treatment==&quot;Placebo&quot;) table.placebo &lt;- table(placebo$Improved) barplot(table.placebo)   To really compare the results, though, it might be most useful to look at these side-by-side. We can to that by altering the graphical parameters: par(mfrow=c(1,2)) # 1 row and two columns of plots barplot(table.treated,main=&quot;Treated&quot;) barplot(table.placebo,main=&quot;Placebo&quot;) Now we can see that there is clearly more “Marked” improvement in the treated patients.       "],["intro-to-this-weeks-data.html", "Week 10 Intro to this week’s data 10.1 Homework", " Week 10 Intro to this week’s data Since you guys are all R experts now, this week you’ll use the documentation to figure out the analysis on your own. First, though, I’ll walk you through the data. We’re using the SNP data from the Portnoy et al. (2015) paper. There are two files: portnoy_genotypes.vcf contains the genotypes for each individual portnoy_metadata.csv contains metadata for each individual   You’ll need three different libraries (two new): install.packages(&quot;vcfR&quot;) install.packages(&quot;hierfstat&quot;) library(vcfR) library(hierfstat) library(adegenet)   The SNP data for today is a VCF (Variant Call Format) file. This is a very common format for analyzing raw SNP data. Take a look at this file in a text editor. There’s a lot of extra information that we do not need for our SNP analysis. We can use the vcfR library to read that file in and convert it to the genind format (remember we used this format to calculate heterozygosity?). This is the format that the adegenet package likes. v &lt;- read.vcfR(&quot;data/portnoy_genotypes.vcf&quot;) ## Scanning file to determine attributes. ## File attributes: ## meta lines: 64 ## header_line: 65 ## variant count: 5914 ## column count: 129 ## Meta line 64 read in. ## All meta lines processed. ## gt matrix initialized. ## Character matrix gt created. ## Character matrix gt rows: 5914 ## Character matrix gt cols: 129 ## skip: 0 ## nrows: 5914 ## row_num: 0 ## Processed variant 1000 Processed variant 2000 Processed variant 3000 Processed variant 4000 Processed variant 5000 Processed variant: 5914 ## All variants processed gen &lt;- vcfR2genind(v) gen ## /// GENIND OBJECT ///////// ## ## // 120 individuals; 5,914 loci; 11,838 alleles; size: 8.7 Mb ## ## // Basic content ## @tab: 120 x 11838 matrix of allele counts ## @loc.n.all: number of alleles per locus (range: 2-3) ## @loc.fac: locus factor for the 11838 columns of @tab ## @all.names: list of allele names for each locus ## @ploidy: ploidy of each individual (range: 2-2) ## @type: codom ## @call: adegenet::df2genind(X = t(x), sep = sep) ## ## // Optional content ## - empty - Let’s explore this file a little: dim(gen$tab) # gen$tab is a matrix where each row is an individual ## [1] 120 11838 head(gen$tab[,1:10]) ## E881_L109_46.0 E881_L109_46.1 E881_L109_71.0 E881_L109_71.1 ## AK_001 2 0 2 0 ## AK_003 2 0 2 0 ## AK_004 1 1 1 1 ## AK_005 1 1 1 1 ## AK_006 2 0 2 0 ## AK_007 1 1 1 1 ## E897_L100_57.0 E897_L100_57.1 E1071_L100_38.0 E1071_L100_38.1 ## AK_001 2 0 2 0 ## AK_003 2 0 0 2 ## AK_004 2 0 2 0 ## AK_005 2 0 2 0 ## AK_006 NA NA 2 0 ## AK_007 1 1 2 0 ## E1071_L100_61.0 E1071_L100_61.1 ## AK_001 1 1 ## AK_003 2 0 ## AK_004 2 0 ## AK_005 2 0 ## AK_006 2 0 ## AK_007 2 0 rownames(gen$tab) #these are the sample names in order ## [1] &quot;AK_001&quot; &quot;AK_003&quot; &quot;AK_004&quot; &quot;AK_005&quot; &quot;AK_006&quot; &quot;AK_007&quot; &quot;AK_008&quot; &quot;AK_009&quot; ## [9] &quot;AK_010&quot; &quot;AK_011&quot; &quot;AK_012&quot; &quot;AK_013&quot; &quot;AK_014&quot; &quot;AK_015&quot; &quot;AK_016&quot; &quot;AK_017&quot; ## [17] &quot;AK_018&quot; &quot;AK_019&quot; &quot;AK_020&quot; &quot;AK_021&quot; &quot;AK_022&quot; &quot;AK_023&quot; &quot;AK_024&quot; &quot;AK_026&quot; ## [25] &quot;AK_028&quot; &quot;AK_029&quot; &quot;AK_030&quot; &quot;AK_031&quot; &quot;AK_034&quot; &quot;AK_035&quot; &quot;AK_036&quot; &quot;LK_001&quot; ## [33] &quot;LK_003&quot; &quot;LK_005&quot; &quot;LK_006&quot; &quot;LK_008&quot; &quot;LK_009&quot; &quot;LK_010&quot; &quot;LK_011&quot; &quot;LK_012&quot; ## [41] &quot;LK_013&quot; &quot;LK_014&quot; &quot;LK_015&quot; &quot;LK_016&quot; &quot;LK_017&quot; &quot;LK_018&quot; &quot;LK_019&quot; &quot;LK_020&quot; ## [49] &quot;LK_021&quot; &quot;LK_022&quot; &quot;LK_023&quot; &quot;LK_024&quot; &quot;LK_025&quot; &quot;LK_026&quot; &quot;LK_027&quot; &quot;LK_028&quot; ## [57] &quot;LK_029&quot; &quot;LK_030&quot; &quot;LK_031&quot; &quot;LK_032&quot; &quot;LK_033&quot; &quot;LK_034&quot; &quot;NC_001&quot; &quot;NC_002&quot; ## [65] &quot;NC_003&quot; &quot;NC_004&quot; &quot;NC_005&quot; &quot;NC_006&quot; &quot;NC_007&quot; &quot;NC_008&quot; &quot;NC_010&quot; &quot;NC_011&quot; ## [73] &quot;NC_013&quot; &quot;NC_014&quot; &quot;NC_015&quot; &quot;NC_016&quot; &quot;NC_017&quot; &quot;NC_018&quot; &quot;NC_019&quot; &quot;NC_022&quot; ## [81] &quot;NC_023&quot; &quot;NC_024&quot; &quot;NC_026&quot; &quot;NC_028&quot; &quot;PC_001&quot; &quot;PC_002&quot; &quot;PC_003&quot; &quot;PC_004&quot; ## [89] &quot;PC_005&quot; &quot;PC_006&quot; &quot;PC_007&quot; &quot;PC_008&quot; &quot;PC_009&quot; &quot;PC_010&quot; &quot;PC_011&quot; &quot;PC_012&quot; ## [97] &quot;PC_013&quot; &quot;PC_014&quot; &quot;PC_015&quot; &quot;PC_016&quot; &quot;PC_017&quot; &quot;PC_018&quot; &quot;PC_019&quot; &quot;PC_020&quot; ## [105] &quot;PC_021&quot; &quot;PC_022&quot; &quot;PC_024&quot; &quot;PC_025&quot; &quot;PC_026&quot; &quot;PC_027&quot; &quot;PC_028&quot; &quot;PC_029&quot; ## [113] &quot;PC_030&quot; &quot;PC_031&quot; &quot;PC_032&quot; &quot;PC_036&quot; &quot;PC_037&quot; &quot;PC_038&quot; &quot;PC_039&quot; &quot;PC_040&quot;   Now we can take a look at the metadata: meta &lt;- read.csv(&quot;data/portnoy_metadata.csv&quot;) head(meta) ## Sample_Name Collection.Date Location.Code Locality Sex ## 1 NC_001 10/27/00 NC North Carolina Unknown ## 2 NC_002 10/27/00 NC North Carolina Unknown ## 3 NC_003 10/27/00 NC North Carolina Unknown ## 4 NC_004 10/27/00 NC North Carolina Unknown ## 5 NC_005 10/27/00 NC North Carolina Unknown ## 6 NC_006 10/27/00 NC North Carolina Unknown The first column is the sample names, but notice they are in a different order than in your genotype object. Other columns you might be interested in are “Locality” and “Sex”       ##Documentation The main package we will use for analysis is adegenet. Here is some helpful documentation. Some helpful sections:   5.4 Measuring and testing population structure   6.2 Performing a Principal Component Analysis on genind objects       10.1 Homework Use the data provided and the documentation to do the following: ###Homework 8: Write a script that does the following: Calculate Fst for males and females separately Create a 2-panel figure with separate PCAs for males and females. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
